------- FILE D:\MasA4\2600\autogaz2600\autogaz2600\default.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE D:\MasA4\2600\autogaz2600\autogaz2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE D:\MasA4\2600\autogaz2600\autogaz2600\default.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d1	    _SD_FireB_length =	.skipL038-_SD_FireB
      4  10000 ????
      5  10000 ????		00 01	    noscore    =	1
      6  10000 ????
      7  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
      8  10000 ????
      9  10000 ????		00 e6	    _Ch0_Counter =	s
     10  10000 ????
     11  10000 ????		00 e5	    _Ch0_Duration =	r
     12  10000 ????
     13  10000 ????		00 e4	    _Ch0_Sound =	q
     14  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE D:\MasA4\2600\autogaz2600\autogaz2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d1	    _SD_FireB_length =	.skipL038-_SD_FireB
      4  10000 ????
      5  10000 ????		00 01	    noscore    =	1
      6  10000 ????
      7  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
      8  10000 ????
      9  10000 ????		00 e6	    _Ch0_Counter =	s
     10  10000 ????
     11  10000 ????		00 e5	    _Ch0_Duration =	r
     12  10000 ????
     13  10000 ????		00 e4	    _Ch0_Sound =	q
     14  10000 ????
------- FILE D:\MasA4\2600\autogaz2600\autogaz2600\default.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c c8 f3 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5				  -	      ifnconst	noscore
    741  f1b5				  -	      lda	scorepointers+1
    742  f1b5				  -			; ldy temp1
    743  f1b5				  -	      sta	temp1
    744  f1b5				  -			; sty scorepointers+1
    745  f1b5				  -
    746  f1b5				  -	      lda	scorepointers+3
    747  f1b5				  -			; ldy temp3
    748  f1b5				  -	      sta	temp3
    749  f1b5				  -			; sty scorepointers+3
    750  f1b5				  -
    751  f1b5				  -
    752  f1b5				  -	      sta	HMCLR
    753  f1b5				  -	      tsx
    754  f1b5				  -	      stx	stack1
    755  f1b5				  -	      ldx	#$E0
    756  f1b5				  -	      stx	HMP0
    757  f1b5				  -
    758  f1b5				  -	      LDA	scorecolor
    759  f1b5				  -	      STA	COLUP0
    760  f1b5				  -	      STA	COLUP1
    761  f1b5				  -	      ifconst	scorefade
    762  f1b5				  -	      STA	stack2
    763  f1b5				  -	      endif
    764  f1b5				  -	      ifconst	pfscore
    765  f1b5				  -	      lda	pfscorecolor
    766  f1b5				  -	      sta	COLUPF
    767  f1b5				  -	      endif
    768  f1b5				  -	      sta	WSYNC
    769  f1b5				  -	      ldx	#0
    770  f1b5				  -	      STx	GRP0
    771  f1b5				  -	      STx	GRP1	; seems to be needed because of vdel
    772  f1b5				  -
    773  f1b5				  -	      lda	scorepointers+5
    774  f1b5				  -			; ldy temp5
    775  f1b5				  -	      sta	temp5,x
    776  f1b5				  -			; sty scorepointers+5
    777  f1b5				  -	      lda	#>scoretable
    778  f1b5				  -	      sta	scorepointers+1
    779  f1b5				  -	      sta	scorepointers+3
    780  f1b5				  -	      sta	scorepointers+5
    781  f1b5				  -	      sta	temp2
    782  f1b5				  -	      sta	temp4
    783  f1b5				  -	      sta	temp6
    784  f1b5				  -	      LDY	#7
    785  f1b5				  -	      STY	VDELP0
    786  f1b5				  -	      STA	RESP0
    787  f1b5				  -	      STA	RESP1
    788  f1b5				  -
    789  f1b5				  -
    790  f1b5				  -	      LDA	#$03
    791  f1b5				  -	      STA	NUSIZ0
    792  f1b5				  -	      STA	NUSIZ1
    793  f1b5				  -	      STA	VDELP1
    794  f1b5				  -	      LDA	#$F0
    795  f1b5				  -	      STA	HMP1
    796  f1b5				  -	      lda	(scorepointers),y
    797  f1b5				  -	      sta	GRP0
    798  f1b5				  -	      STA	HMOVE	; cycle 73 ?
    799  f1b5				  -	      jmp	beginscore
    800  f1b5				  -
    801  f1b5				  -
    802  f1b5				  -	      if	((<*)>$d4)
    803  f1b5				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f1b5				  -	      endif
    805  f1b5				  -
    806  f1b5				  -loop2
    807  f1b5				  -	      lda	(scorepointers),y	;+5 68 204
    808  f1b5				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f1b5				  -	      ifconst	pfscore
    810  f1b5				  -	      lda.w	pfscore1
    811  f1b5				  -	      sta	PF1
    812  f1b5				  -	      else
    813  f1b5				  -	      ifconst	scorefade
    814  f1b5				  -	      sleep	2
    815  f1b5				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f1b5				  -	      else
    817  f1b5				  -	      sleep	7
    818  f1b5				  -	      endif
    819  f1b5				  -	      endif
    820  f1b5				  -			; cycle 0
    821  f1b5				  -beginscore
    822  f1b5				  -	      lda	(scorepointers+$8),y	;+5 5 15
    823  f1b5				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f1b5				  -	      lda	(scorepointers+$6),y	;+5 13 39
    825  f1b5				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f1b5				  -	      lax	(scorepointers+$2),y	;+5 29 87
    827  f1b5				  -	      txs
    828  f1b5				  -	      lax	(scorepointers+$4),y	;+5 36 108
    829  f1b5				  -	      ifconst	scorefade
    830  f1b5				  -	      lda	stack2
    831  f1b5				  -	      else
    832  f1b5				  -	      sleep	3
    833  f1b5				  -	      endif
    834  f1b5				  -
    835  f1b5				  -	      ifconst	pfscore
    836  f1b5				  -	      lda	pfscore2
    837  f1b5				  -	      sta	PF1
    838  f1b5				  -	      else
    839  f1b5				  -	      ifconst	scorefade
    840  f1b5				  -	      sta	COLUP0
    841  f1b5				  -	      sta	COLUP1
    842  f1b5				  -	      else
    843  f1b5				  -	      sleep	6
    844  f1b5				  -	      endif
    845  f1b5				  -	      endif
    846  f1b5				  -
    847  f1b5				  -	      lda	(scorepointers+$A),y	;+5 21 63
    848  f1b5				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f1b5				  -	      tsx
    850  f1b5				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f1b5				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f1b5				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f1b5				  -	      dey
    854  f1b5				  -	      bpl	loop2	;+2 60 180
    855  f1b5				  -
    856  f1b5				  -	      ldx	stack1
    857  f1b5				  -	      txs
    858  f1b5				  -			; lda scorepointers+1
    859  f1b5				  -	      ldy	temp1
    860  f1b5				  -			; sta temp1
    861  f1b5				  -	      sty	scorepointers+1
    862  f1b5				  -
    863  f1b5				  -	      LDA	#0
    864  f1b5				  -	      sta	PF1
    865  f1b5				  -	      STA	GRP0
    866  f1b5				  -	      STA	GRP1
    867  f1b5				  -	      STA	VDELP0
    868  f1b5				  -	      STA	VDELP1	;do we need these
    869  f1b5				  -	      STA	NUSIZ0
    870  f1b5				  -	      STA	NUSIZ1
    871  f1b5				  -
    872  f1b5				  -			; lda scorepointers+3
    873  f1b5				  -	      ldy	temp3
    874  f1b5				  -			; sta temp3
    875  f1b5				  -	      sty	scorepointers+3
    876  f1b5				  -
    877  f1b5				  -			; lda scorepointers+5
    878  f1b5				  -	      ldy	temp5
    879  f1b5				  -			; sta temp5
    880  f1b5				  -	      sty	scorepointers+5
    881  f1b5					      endif		;noscore
    882  f1b5		       a9 c2		      LDA	#%11000010
    883  f1b7		       85 02		      sta	WSYNC
    884  f1b9		       85 01		      STA	VBLANK
      0  f1bb					      RETURN
      1  f1bb					      ifnconst	bankswitch
      2  f1bb		       60		      rts
      3  f1bc				  -	      else
      4  f1bc				  -	      jmp	BS_return
      5  f1bc					      endif
    886  f1bc
    887  f1bc				  -	      ifconst	shakescreen
    888  f1bc				  -doshakescreen
    889  f1bc				  -	      bit	shakescreen
    890  f1bc				  -	      bmi	noshakescreen
    891  f1bc				  -	      sta	WSYNC
    892  f1bc				  -noshakescreen
    893  f1bc				  -	      ldx	missile0height
    894  f1bc				  -	      inx
    895  f1bc				  -	      rts
    896  f1bc					      endif
    897  f1bc
    898  f1bc							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f1bc
    900  f1bc							; playfield drawing routines
    901  f1bc							; you get a 32x12 bitmapped display in a single color :)
    902  f1bc							; 0-31 and 0-11
    903  f1bc
    904  f1bc				   pfclear		; clears playfield - or fill with pattern
    905  f1bc				  -	      ifconst	pfres
    906  f1bc				  -	      ldx	#pfres*pfwidth-1
    907  f1bc					      else
    908  f1bc		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f1be					      endif
    910  f1be				   pfclear_loop
    911  f1be					      ifnconst	superchip
    912  f1be		       95 a4		      sta	playfield,x
    913  f1c0				  -	      else
    914  f1c0				  -	      sta	playfield-128,x
    915  f1c0					      endif
    916  f1c0		       ca		      dex
    917  f1c1		       10 fb		      bpl	pfclear_loop
      0  f1c3					      RETURN
      1  f1c3					      ifnconst	bankswitch
      2  f1c3		       60		      rts
      3  f1c4				  -	      else
      4  f1c4				  -	      jmp	BS_return
      5  f1c4					      endif
    919  f1c4
    920  f1c4				   setuppointers
    921  f1c4		       86 9d		      stx	temp2	; store on.off.flip value
    922  f1c6		       aa		      tax		; put x-value in x 
    923  f1c7		       4a		      lsr
    924  f1c8		       4a		      lsr
    925  f1c9		       4a		      lsr		; divide x pos by 8 
    926  f1ca		       85 9c		      sta	temp1
    927  f1cc		       98		      tya
    928  f1cd		       0a		      asl
    929  f1ce					      if	pfwidth=4
    930  f1ce		       0a		      asl		; multiply y pos by 4
    931  f1cf					      endif		; else multiply by 2
    932  f1cf		       18		      clc
    933  f1d0		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f1d2		       a8		      tay		; put the value in y
    935  f1d3		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f1d5		       60		      rts
    937  f1d6
    938  f1d6				   pfread
    939  f1d6							;x=xvalue, y=yvalue
    940  f1d6		       20 c4 f1 	      jsr	setuppointers
    941  f1d9		       bd 3e f2 	      lda	setbyte,x
    942  f1dc		       39 a4 00 	      and	playfield,y
    943  f1df		       5d 3e f2 	      eor	setbyte,x
    944  f1e2							; beq readzero
    945  f1e2							; lda #1
    946  f1e2							; readzero
      0  f1e2					      RETURN
      1  f1e2					      ifnconst	bankswitch
      2  f1e2		       60		      rts
      3  f1e3				  -	      else
      4  f1e3				  -	      jmp	BS_return
      5  f1e3					      endif
    948  f1e3
    949  f1e3				   pfpixel
    950  f1e3							;x=xvalue, y=yvalue, a=0,1,2
    951  f1e3		       20 c4 f1 	      jsr	setuppointers
    952  f1e6
    953  f1e6				  -	      ifconst	bankswitch
    954  f1e6				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f1e6				  -	      beq	pixelon_r	; if "on" go to on
    956  f1e6				  -	      lsr
    957  f1e6				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f1e6				  -	      lda	playfield,y	; if here, it's "flip"
    959  f1e6				  -	      eor	setbyte,x
    960  f1e6				  -	      ifconst	superchip
    961  f1e6				  -	      sta	playfield-128,y
    962  f1e6				  -	      else
    963  f1e6				  -	      sta	playfield,y
    964  f1e6				  -	      endif
    965  f1e6				  -	      RETURN
    966  f1e6				  -pixelon_r
    967  f1e6				  -	      lda	playfield,y
    968  f1e6				  -	      ora	setbyte,x
    969  f1e6				  -	      ifconst	superchip
    970  f1e6				  -	      sta	playfield-128,y
    971  f1e6				  -	      else
    972  f1e6				  -	      sta	playfield,y
    973  f1e6				  -	      endif
    974  f1e6				  -	      RETURN
    975  f1e6				  -pixeloff_r
    976  f1e6				  -	      lda	setbyte,x
    977  f1e6				  -	      eor	#$ff
    978  f1e6				  -	      and	playfield,y
    979  f1e6				  -	      ifconst	superchip
    980  f1e6				  -	      sta	playfield-128,y
    981  f1e6				  -	      else
    982  f1e6				  -	      sta	playfield,y
    983  f1e6				  -	      endif
    984  f1e6				  -	      RETURN
    985  f1e6				  -
    986  f1e6					      else
    987  f1e6		       4c 17 f2 	      jmp	plotpoint
    988  f1e9					      endif
    989  f1e9
    990  f1e9				   pfhline
    991  f1e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f1e9		       20 c4 f1 	      jsr	setuppointers
    993  f1ec		       4c f6 f1 	      jmp	noinc
    994  f1ef				   keepgoing
    995  f1ef		       e8		      inx
    996  f1f0		       8a		      txa
    997  f1f1		       29 07		      and	#7
    998  f1f3		       d0 01		      bne	noinc
    999  f1f5		       c8		      iny
   1000  f1f6				   noinc
   1001  f1f6		       20 17 f2 	      jsr	plotpoint
   1002  f1f9		       e4 9e		      cpx	temp3
   1003  f1fb		       30 f2		      bmi	keepgoing
      0  f1fd					      RETURN
      1  f1fd					      ifnconst	bankswitch
      2  f1fd		       60		      rts
      3  f1fe				  -	      else
      4  f1fe				  -	      jmp	BS_return
      5  f1fe					      endif
   1005  f1fe
   1006  f1fe				   pfvline
   1007  f1fe							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f1fe		       20 c4 f1 	      jsr	setuppointers
   1009  f201		       84 9c		      sty	temp1	; store memory location offset
   1010  f203		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f205		       a5 9e		      lda	temp3
   1012  f207		       0a		      asl
   1013  f208					      if	pfwidth=4
   1014  f208		       0a		      asl		; multiply by 4
   1015  f209					      endif		; else multiply by 2
   1016  f209		       85 9e		      sta	temp3	; store it
   1017  f20b							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f20b							; right now, temp1=y=starting memory location, temp3=final
   1019  f20b							; x should equal original x value
   1020  f20b				   keepgoingy
   1021  f20b		       20 17 f2 	      jsr	plotpoint
   1022  f20e		       c8		      iny
   1023  f20f		       c8		      iny
   1024  f210					      if	pfwidth=4
   1025  f210		       c8		      iny
   1026  f211		       c8		      iny
   1027  f212					      endif
   1028  f212		       c4 9e		      cpy	temp3
   1029  f214		       30 f5		      bmi	keepgoingy
      0  f216					      RETURN
      1  f216					      ifnconst	bankswitch
      2  f216		       60		      rts
      3  f217				  -	      else
      4  f217				  -	      jmp	BS_return
      5  f217					      endif
   1031  f217
   1032  f217				   plotpoint
   1033  f217		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f219		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f21b		       4a		      lsr
   1036  f21c		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f21e		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f221		       5d 3e f2 	      eor	setbyte,x
   1039  f224				  -	      ifconst	superchip
   1040  f224				  -	      sta	playfield-128,y
   1041  f224					      else
   1042  f224		       99 a4 00 	      sta	playfield,y
   1043  f227					      endif
   1044  f227		       60		      rts
   1045  f228				   pixelon
   1046  f228		       b9 a4 00 	      lda	playfield,y
   1047  f22b		       1d 3e f2 	      ora	setbyte,x
   1048  f22e				  -	      ifconst	superchip
   1049  f22e				  -	      sta	playfield-128,y
   1050  f22e					      else
   1051  f22e		       99 a4 00 	      sta	playfield,y
   1052  f231					      endif
   1053  f231		       60		      rts
   1054  f232				   pixeloff
   1055  f232		       bd 3e f2 	      lda	setbyte,x
   1056  f235		       49 ff		      eor	#$ff
   1057  f237		       39 a4 00 	      and	playfield,y
   1058  f23a				  -	      ifconst	superchip
   1059  f23a				  -	      sta	playfield-128,y
   1060  f23a					      else
   1061  f23a		       99 a4 00 	      sta	playfield,y
   1062  f23d					      endif
   1063  f23d		       60		      rts
   1064  f23e
   1065  f23e				   setbyte
   1066  f23e					      ifnconst	pfcenter
   1067  f23e		       80		      .byte.b	$80
   1068  f23f		       40		      .byte.b	$40
   1069  f240		       20		      .byte.b	$20
   1070  f241		       10		      .byte.b	$10
   1071  f242		       08		      .byte.b	$08
   1072  f243		       04		      .byte.b	$04
   1073  f244		       02		      .byte.b	$02
   1074  f245		       01		      .byte.b	$01
   1075  f246					      endif
   1076  f246		       01		      .byte.b	$01
   1077  f247		       02		      .byte.b	$02
   1078  f248		       04		      .byte.b	$04
   1079  f249		       08		      .byte.b	$08
   1080  f24a		       10		      .byte.b	$10
   1081  f24b		       20		      .byte.b	$20
   1082  f24c		       40		      .byte.b	$40
   1083  f24d		       80		      .byte.b	$80
   1084  f24e		       80		      .byte.b	$80
   1085  f24f		       40		      .byte.b	$40
   1086  f250		       20		      .byte.b	$20
   1087  f251		       10		      .byte.b	$10
   1088  f252		       08		      .byte.b	$08
   1089  f253		       04		      .byte.b	$04
   1090  f254		       02		      .byte.b	$02
   1091  f255		       01		      .byte.b	$01
   1092  f256		       01		      .byte.b	$01
   1093  f257		       02		      .byte.b	$02
   1094  f258		       04		      .byte.b	$04
   1095  f259		       08		      .byte.b	$08
   1096  f25a		       10		      .byte.b	$10
   1097  f25b		       20		      .byte.b	$20
   1098  f25c		       40		      .byte.b	$40
   1099  f25d		       80		      .byte.b	$80
   1100  f25e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f25e
   1102  f25e				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f25e		       d0 13		      bne	notleft
   1104  f260							;left
   1105  f260				  -	      ifconst	pfres
   1106  f260				  -	      ldx	#pfres*4
   1107  f260					      else
   1108  f260		       a2 30		      ldx	#48
   1109  f262					      endif
   1110  f262				   leftloop
   1111  f262		       b5 a3		      lda	playfield-1,x
   1112  f264		       4a		      lsr
   1113  f265
   1114  f265				  -	      ifconst	superchip
   1115  f265				  -	      lda	playfield-2,x
   1116  f265				  -	      rol
   1117  f265				  -	      sta	playfield-130,x
   1118  f265				  -	      lda	playfield-3,x
   1119  f265				  -	      ror
   1120  f265				  -	      sta	playfield-131,x
   1121  f265				  -	      lda	playfield-4,x
   1122  f265				  -	      rol
   1123  f265				  -	      sta	playfield-132,x
   1124  f265				  -	      lda	playfield-1,x
   1125  f265				  -	      ror
   1126  f265				  -	      sta	playfield-129,x
   1127  f265					      else
   1128  f265		       36 a2		      rol	playfield-2,x
   1129  f267		       76 a1		      ror	playfield-3,x
   1130  f269		       36 a0		      rol	playfield-4,x
   1131  f26b		       76 a3		      ror	playfield-1,x
   1132  f26d					      endif
   1133  f26d
   1134  f26d		       8a		      txa
   1135  f26e		       cb 04		      sbx	#4
   1136  f270		       d0 f0		      bne	leftloop
      0  f272					      RETURN
      1  f272					      ifnconst	bankswitch
      2  f272		       60		      rts
      3  f273				  -	      else
      4  f273				  -	      jmp	BS_return
      5  f273					      endif
   1138  f273
   1139  f273				   notleft
   1140  f273		       4a		      lsr
   1141  f274		       90 13		      bcc	notright
   1142  f276							;right
   1143  f276
   1144  f276				  -	      ifconst	pfres
   1145  f276				  -	      ldx	#pfres*4
   1146  f276					      else
   1147  f276		       a2 30		      ldx	#48
   1148  f278					      endif
   1149  f278				   rightloop
   1150  f278		       b5 a0		      lda	playfield-4,x
   1151  f27a		       4a		      lsr
   1152  f27b				  -	      ifconst	superchip
   1153  f27b				  -	      lda	playfield-3,x
   1154  f27b				  -	      rol
   1155  f27b				  -	      sta	playfield-131,x
   1156  f27b				  -	      lda	playfield-2,x
   1157  f27b				  -	      ror
   1158  f27b				  -	      sta	playfield-130,x
   1159  f27b				  -	      lda	playfield-1,x
   1160  f27b				  -	      rol
   1161  f27b				  -	      sta	playfield-129,x
   1162  f27b				  -	      lda	playfield-4,x
   1163  f27b				  -	      ror
   1164  f27b				  -	      sta	playfield-132,x
   1165  f27b					      else
   1166  f27b		       36 a1		      rol	playfield-3,x
   1167  f27d		       76 a2		      ror	playfield-2,x
   1168  f27f		       36 a3		      rol	playfield-1,x
   1169  f281		       76 a0		      ror	playfield-4,x
   1170  f283					      endif
   1171  f283		       8a		      txa
   1172  f284		       cb 04		      sbx	#4
   1173  f286		       d0 f0		      bne	rightloop
      0  f288					      RETURN
      1  f288					      ifnconst	bankswitch
      2  f288		       60		      rts
      3  f289				  -	      else
      4  f289				  -	      jmp	BS_return
      5  f289					      endif
   1175  f289
   1176  f289				   notright
   1177  f289		       4a		      lsr
   1178  f28a		       90 49		      bcc	notup
   1179  f28c							;up
   1180  f28c		       4a		      lsr
   1181  f28d		       90 02		      bcc	onedecup
   1182  f28f		       c6 ef		      dec	playfieldpos
   1183  f291				   onedecup
   1184  f291		       c6 ef		      dec	playfieldpos
   1185  f293		       f0 02		      beq	shiftdown
   1186  f295		       10 3d		      bpl	noshiftdown2
   1187  f297				   shiftdown
   1188  f297				  -	      ifconst	pfrowheight
   1189  f297				  -	      lda	#pfrowheight
   1190  f297					      else
   1191  f297					      ifnconst	pfres
   1192  f297		       a9 08		      lda	#8
   1193  f299				  -	      else
   1194  f299				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f299					      endif
   1196  f299					      endif
   1197  f299
   1198  f299		       85 ef		      sta	playfieldpos
   1199  f29b		       a5 a7		      lda	playfield+3
   1200  f29d		       85 9f		      sta	temp4
   1201  f29f		       a5 a6		      lda	playfield+2
   1202  f2a1		       85 9e		      sta	temp3
   1203  f2a3		       a5 a5		      lda	playfield+1
   1204  f2a5		       85 9d		      sta	temp2
   1205  f2a7		       a5 a4		      lda	playfield
   1206  f2a9		       85 9c		      sta	temp1
   1207  f2ab		       a2 00		      ldx	#0
   1208  f2ad				   up2
   1209  f2ad		       b5 a8		      lda	playfield+4,x
   1210  f2af				  -	      ifconst	superchip
   1211  f2af				  -	      sta	playfield-128,x
   1212  f2af				  -	      lda	playfield+5,x
   1213  f2af				  -	      sta	playfield-127,x
   1214  f2af				  -	      lda	playfield+6,x
   1215  f2af				  -	      sta	playfield-126,x
   1216  f2af				  -	      lda	playfield+7,x
   1217  f2af				  -	      sta	playfield-125,x
   1218  f2af					      else
   1219  f2af		       95 a4		      sta	playfield,x
   1220  f2b1		       b5 a9		      lda	playfield+5,x
   1221  f2b3		       95 a5		      sta	playfield+1,x
   1222  f2b5		       b5 aa		      lda	playfield+6,x
   1223  f2b7		       95 a6		      sta	playfield+2,x
   1224  f2b9		       b5 ab		      lda	playfield+7,x
   1225  f2bb		       95 a7		      sta	playfield+3,x
   1226  f2bd					      endif
   1227  f2bd		       8a		      txa
   1228  f2be		       cb fc		      sbx	#252
   1229  f2c0				  -	      ifconst	pfres
   1230  f2c0				  -	      cpx	#(pfres-1)*4
   1231  f2c0					      else
   1232  f2c0		       e0 2c		      cpx	#44
   1233  f2c2					      endif
   1234  f2c2		       d0 e9		      bne	up2
   1235  f2c4
   1236  f2c4		       a5 9f		      lda	temp4
   1237  f2c6
   1238  f2c6				  -	      ifconst	superchip
   1239  f2c6				  -	      ifconst	pfres
   1240  f2c6				  -	      sta	playfield+pfres*4-129
   1241  f2c6				  -	      lda	temp3
   1242  f2c6				  -	      sta	playfield+pfres*4-130
   1243  f2c6				  -	      lda	temp2
   1244  f2c6				  -	      sta	playfield+pfres*4-131
   1245  f2c6				  -	      lda	temp1
   1246  f2c6				  -	      sta	playfield+pfres*4-132
   1247  f2c6				  -	      else
   1248  f2c6				  -	      sta	playfield+47-128
   1249  f2c6				  -	      lda	temp3
   1250  f2c6				  -	      sta	playfield+46-128
   1251  f2c6				  -	      lda	temp2
   1252  f2c6				  -	      sta	playfield+45-128
   1253  f2c6				  -	      lda	temp1
   1254  f2c6				  -	      sta	playfield+44-128
   1255  f2c6				  -	      endif
   1256  f2c6					      else
   1257  f2c6				  -	      ifconst	pfres
   1258  f2c6				  -	      sta	playfield+pfres*4-1
   1259  f2c6				  -	      lda	temp3
   1260  f2c6				  -	      sta	playfield+pfres*4-2
   1261  f2c6				  -	      lda	temp2
   1262  f2c6				  -	      sta	playfield+pfres*4-3
   1263  f2c6				  -	      lda	temp1
   1264  f2c6				  -	      sta	playfield+pfres*4-4
   1265  f2c6					      else
   1266  f2c6		       85 d3		      sta	playfield+47
   1267  f2c8		       a5 9e		      lda	temp3
   1268  f2ca		       85 d2		      sta	playfield+46
   1269  f2cc		       a5 9d		      lda	temp2
   1270  f2ce		       85 d1		      sta	playfield+45
   1271  f2d0		       a5 9c		      lda	temp1
   1272  f2d2		       85 d0		      sta	playfield+44
   1273  f2d4					      endif
   1274  f2d4					      endif
   1275  f2d4				   noshiftdown2
      0  f2d4					      RETURN
      1  f2d4					      ifnconst	bankswitch
      2  f2d4		       60		      rts
      3  f2d5				  -	      else
      4  f2d5				  -	      jmp	BS_return
      5  f2d5					      endif
   1277  f2d5
   1278  f2d5
   1279  f2d5				   notup
   1280  f2d5							;down
   1281  f2d5		       4a		      lsr
   1282  f2d6		       b0 02		      bcs	oneincup
   1283  f2d8		       e6 ef		      inc	playfieldpos
   1284  f2da				   oneincup
   1285  f2da		       e6 ef		      inc	playfieldpos
   1286  f2dc		       a5 ef		      lda	playfieldpos
   1287  f2de
   1288  f2de				  -	      ifconst	pfrowheight
   1289  f2de				  -	      cmp	#pfrowheight+1
   1290  f2de					      else
   1291  f2de					      ifnconst	pfres
   1292  f2de		       c9 09		      cmp	#9
   1293  f2e0				  -	      else
   1294  f2e0				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f2e0					      endif
   1296  f2e0					      endif
   1297  f2e0
   1298  f2e0		       90 3b		      bcc	noshiftdown
   1299  f2e2		       a9 01		      lda	#1
   1300  f2e4		       85 ef		      sta	playfieldpos
   1301  f2e6
   1302  f2e6				  -	      ifconst	pfres
   1303  f2e6				  -	      lda	playfield+pfres*4-1
   1304  f2e6				  -	      sta	temp4
   1305  f2e6				  -	      lda	playfield+pfres*4-2
   1306  f2e6				  -	      sta	temp3
   1307  f2e6				  -	      lda	playfield+pfres*4-3
   1308  f2e6				  -	      sta	temp2
   1309  f2e6				  -	      lda	playfield+pfres*4-4
   1310  f2e6					      else
   1311  f2e6		       a5 d3		      lda	playfield+47
   1312  f2e8		       85 9f		      sta	temp4
   1313  f2ea		       a5 d2		      lda	playfield+46
   1314  f2ec		       85 9e		      sta	temp3
   1315  f2ee		       a5 d1		      lda	playfield+45
   1316  f2f0		       85 9d		      sta	temp2
   1317  f2f2		       a5 d0		      lda	playfield+44
   1318  f2f4					      endif
   1319  f2f4
   1320  f2f4		       85 9c		      sta	temp1
   1321  f2f6
   1322  f2f6				  -	      ifconst	pfres
   1323  f2f6				  -	      ldx	#(pfres-1)*4
   1324  f2f6					      else
   1325  f2f6		       a2 2c		      ldx	#44
   1326  f2f8					      endif
   1327  f2f8				   down2
   1328  f2f8		       b5 a3		      lda	playfield-1,x
   1329  f2fa				  -	      ifconst	superchip
   1330  f2fa				  -	      sta	playfield-125,x
   1331  f2fa				  -	      lda	playfield-2,x
   1332  f2fa				  -	      sta	playfield-126,x
   1333  f2fa				  -	      lda	playfield-3,x
   1334  f2fa				  -	      sta	playfield-127,x
   1335  f2fa				  -	      lda	playfield-4,x
   1336  f2fa				  -	      sta	playfield-128,x
   1337  f2fa					      else
   1338  f2fa		       95 a7		      sta	playfield+3,x
   1339  f2fc		       b5 a2		      lda	playfield-2,x
   1340  f2fe		       95 a6		      sta	playfield+2,x
   1341  f300		       b5 a1		      lda	playfield-3,x
   1342  f302		       95 a5		      sta	playfield+1,x
   1343  f304		       b5 a0		      lda	playfield-4,x
   1344  f306		       95 a4		      sta	playfield,x
   1345  f308					      endif
   1346  f308		       8a		      txa
   1347  f309		       cb 04		      sbx	#4
   1348  f30b		       d0 eb		      bne	down2
   1349  f30d
   1350  f30d		       a5 9f		      lda	temp4
   1351  f30f				  -	      ifconst	superchip
   1352  f30f				  -	      sta	playfield-125
   1353  f30f				  -	      lda	temp3
   1354  f30f				  -	      sta	playfield-126
   1355  f30f				  -	      lda	temp2
   1356  f30f				  -	      sta	playfield-127
   1357  f30f				  -	      lda	temp1
   1358  f30f				  -	      sta	playfield-128
   1359  f30f					      else
   1360  f30f		       85 a7		      sta	playfield+3
   1361  f311		       a5 9e		      lda	temp3
   1362  f313		       85 a6		      sta	playfield+2
   1363  f315		       a5 9d		      lda	temp2
   1364  f317		       85 a5		      sta	playfield+1
   1365  f319		       a5 9c		      lda	temp1
   1366  f31b		       85 a4		      sta	playfield
   1367  f31d					      endif
   1368  f31d				   noshiftdown
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1370  f31e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f31e
   1372  f31e							;standard routines needed for pretty much all games
   1373  f31e							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f31e							; repositioning code and score pointer setup moved to overscan
   1375  f31e							; read switches, joysticks now compiler generated (more efficient)
   1376  f31e
   1377  f31e				   randomize
   1378  f31e		       a5 a2		      lda	rand
   1379  f320		       4a		      lsr
   1380  f321				  -	      ifconst	rand16
   1381  f321				  -	      rol	rand16
   1382  f321					      endif
   1383  f321		       90 02		      bcc	noeor
   1384  f323		       49 b4		      eor	#$B4
   1385  f325				   noeor
   1386  f325		       85 a2		      sta	rand
   1387  f327				  -	      ifconst	rand16
   1388  f327				  -	      eor	rand16
   1389  f327					      endif
      0  f327					      RETURN
      1  f327					      ifnconst	bankswitch
      2  f327		       60		      rts
      3  f328				  -	      else
      4  f328				  -	      jmp	BS_return
      5  f328					      endif
   1391  f328							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f328
   1393  f328				   drawscreen
   1394  f328				  -	      ifconst	debugscore
   1395  f328				  -	      ldx	#14
   1396  f328				  -	      lda	INTIM	; display # cycles left in the score
   1397  f328				  -
   1398  f328				  -	      ifconst	mincycles
   1399  f328				  -	      lda	mincycles
   1400  f328				  -	      cmp	INTIM
   1401  f328				  -	      lda	mincycles
   1402  f328				  -	      bcc	nochange
   1403  f328				  -	      lda	INTIM
   1404  f328				  -	      sta	mincycles
   1405  f328				  -nochange
   1406  f328				  -	      endif
   1407  f328				  -
   1408  f328				  -			; cmp #$2B
   1409  f328				  -			; bcs no_cycles_left
   1410  f328				  -	      bmi	cycles_left
   1411  f328				  -	      ldx	#64
   1412  f328				  -	      eor	#$ff	;make negative
   1413  f328				  -cycles_left
   1414  f328				  -	      stx	scorecolor
   1415  f328				  -	      and	#$7f	; clear sign bit
   1416  f328				  -	      tax
   1417  f328				  -	      lda	scorebcd,x
   1418  f328				  -	      sta	score+2
   1419  f328				  -	      lda	scorebcd1,x
   1420  f328				  -	      sta	score+1
   1421  f328				  -	      jmp	done_debugscore
   1422  f328				  -scorebcd
   1423  f328				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f328				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f328				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f328				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f328				  -scorebcd1
   1428  f328				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f328				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f328				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f328				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f328				  -done_debugscore
   1433  f328					      endif
   1434  f328
   1435  f328				  -	      ifconst	debugcycles
   1436  f328				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f328				  -			; cmp #$2B
   1438  f328				  -			; BCC overscan
   1439  f328				  -	      bmi	overscan
   1440  f328				  -	      sta	COLUBK
   1441  f328				  -	      bcs	doneoverscan
   1442  f328					      endif
   1443  f328
   1444  f328				   overscan
   1445  f328				  -	      ifconst	interlaced
   1446  f328				  -	      PHP
   1447  f328				  -	      PLA
   1448  f328				  -	      EOR	#4	; flip interrupt bit
   1449  f328				  -	      PHA
   1450  f328				  -	      PLP
   1451  f328				  -	      AND	#4	; isolate the interrupt bit
   1452  f328				  -	      TAX		; save it for later
   1453  f328					      endif
   1454  f328
   1455  f328				   overscanloop
   1456  f328		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f32b		       30 fb		      bmi	overscanloop
   1458  f32d				   doneoverscan
   1459  f32d
   1460  f32d							;do VSYNC
   1461  f32d
   1462  f32d				  -	      ifconst	interlaced
   1463  f32d				  -	      CPX	#4
   1464  f32d				  -	      BNE	oddframevsync
   1465  f32d					      endif
   1466  f32d
   1467  f32d		       a9 02		      lda	#2
   1468  f32f		       85 02		      sta	WSYNC
   1469  f331		       85 00		      sta	VSYNC
   1470  f333		       85 02		      STA	WSYNC
   1471  f335		       85 02		      STA	WSYNC
   1472  f337		       4a		      lsr
   1473  f338		       85 02		      STA	WSYNC
   1474  f33a		       85 00		      STA	VSYNC
   1475  f33c		       85 01		      sta	VBLANK
   1476  f33e					      ifnconst	overscan_time
   1477  f33e		       a9 a5		      lda	#37+128
   1478  f340				  -	      else
   1479  f340				  -	      lda	#overscan_time+128
   1480  f340					      endif
   1481  f340		       8d 96 02 	      sta	TIM64T
   1482  f343
   1483  f343				  -	      ifconst	interlaced
   1484  f343				  -	      jmp	postsync
   1485  f343				  -
   1486  f343				  -oddframevsync
   1487  f343				  -	      sta	WSYNC
   1488  f343				  -
   1489  f343				  -	      LDA	($80,X)	; 11 waste
   1490  f343				  -	      LDA	($80,X)	; 11 waste
   1491  f343				  -	      LDA	($80,X)	; 11 waste
   1492  f343				  -
   1493  f343				  -	      lda	#2
   1494  f343				  -	      sta	VSYNC
   1495  f343				  -	      sta	WSYNC
   1496  f343				  -	      sta	WSYNC
   1497  f343				  -	      sta	WSYNC
   1498  f343				  -
   1499  f343				  -	      LDA	($80,X)	; 11 waste
   1500  f343				  -	      LDA	($80,X)	; 11 waste
   1501  f343				  -	      LDA	($80,X)	; 11 waste
   1502  f343				  -
   1503  f343				  -	      lda	#0
   1504  f343				  -	      sta	VSYNC
   1505  f343				  -	      sta	VBLANK
   1506  f343				  -	      ifnconst	overscan_time
   1507  f343				  -	      lda	#37+128
   1508  f343				  -	      else
   1509  f343				  -	      lda	#overscan_time+128
   1510  f343				  -	      endif
   1511  f343				  -	      sta	TIM64T
   1512  f343				  -
   1513  f343				  -postsync
   1514  f343					      endif
   1515  f343
   1516  f343				  -	      ifconst	legacy
   1517  f343				  -	      if	legacy < 100
   1518  f343				  -	      ldx	#4
   1519  f343				  -adjustloop
   1520  f343				  -	      lda	player0x,x
   1521  f343				  -	      sec
   1522  f343				  -	      sbc	#14	;?
   1523  f343				  -	      sta	player0x,x
   1524  f343				  -	      dex
   1525  f343				  -	      bpl	adjustloop
   1526  f343				  -	      endif
   1527  f343					      endif
   1528  f343				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f343				  -	      repeat	($fa-(<*))
   1530  f343				  -	      nop
   1531  f343				  -	      repend
   1532  f343					      endif
   1533  f343		       85 02		      sta	WSYNC
   1534  f345		       a2 04		      ldx	#4
      0  f347					      SLEEP	3
      1  f347				   .CYCLES    SET	3
      2  f347
      3  f347				  -	      IF	.CYCLES < 2
      4  f347				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f347				  -	      ERR
      6  f347					      ENDIF
      7  f347
      8  f347					      IF	.CYCLES & 1
      9  f347					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f347		       04 00		      nop	0
     11  f349				  -	      ELSE
     12  f349				  -	      bit	VSYNC
     13  f349					      ENDIF
     14  f349				   .CYCLES    SET	.CYCLES - 3
     15  f349					      ENDIF
     16  f349
     17  f349				  -	      REPEAT	.CYCLES / 2
     18  f349				  -	      nop
     19  f349					      REPEND
   1536  f349				   HorPosLoop		; 5
   1537  f349		       b5 80		      lda	player0x,X	;+4 9
   1538  f34b		       38		      sec		;+2 11
   1539  f34c				   DivideLoop
   1540  f34c		       e9 0f		      sbc	#15
   1541  f34e		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f350		       95 9c		      sta	temp1,X	;+4 19
   1543  f352		       95 10		      sta	RESP0,X	;+4 23
   1544  f354		       85 02		      sta	WSYNC
   1545  f356		       ca		      dex
   1546  f357		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f359							; 4
   1548  f359
   1549  f359		       a2 04		      ldx	#4
   1550  f35b		       b4 9c		      ldy	temp1,X
   1551  f35d		       b9 b9 f2 	      lda	repostable-256,Y
   1552  f360		       95 20		      sta	HMP0,X	;+14 18
   1553  f362
   1554  f362		       ca		      dex
   1555  f363		       b4 9c		      ldy	temp1,X
   1556  f365		       b9 b9 f2 	      lda	repostable-256,Y
   1557  f368		       95 20		      sta	HMP0,X	;+14 32
   1558  f36a
   1559  f36a		       ca		      dex
   1560  f36b		       b4 9c		      ldy	temp1,X
   1561  f36d		       b9 b9 f2 	      lda	repostable-256,Y
   1562  f370		       95 20		      sta	HMP0,X	;+14 46
   1563  f372
   1564  f372		       ca		      dex
   1565  f373		       b4 9c		      ldy	temp1,X
   1566  f375		       b9 b9 f2 	      lda	repostable-256,Y
   1567  f378		       95 20		      sta	HMP0,X	;+14 60
   1568  f37a
   1569  f37a		       ca		      dex
   1570  f37b		       b4 9c		      ldy	temp1,X
   1571  f37d		       b9 b9 f2 	      lda	repostable-256,Y
   1572  f380		       95 20		      sta	HMP0,X	;+14 74
   1573  f382
   1574  f382		       85 02		      sta	WSYNC
   1575  f384
   1576  f384		       85 2a		      sta	HMOVE	;+3 3
   1577  f386
   1578  f386
   1579  f386				  -	      ifconst	legacy
   1580  f386				  -	      if	legacy < 100
   1581  f386				  -	      ldx	#4
   1582  f386				  -adjustloop2
   1583  f386				  -	      lda	player0x,x
   1584  f386				  -	      clc
   1585  f386				  -	      adc	#14	;?
   1586  f386				  -	      sta	player0x,x
   1587  f386				  -	      dex
   1588  f386				  -	      bpl	adjustloop2
   1589  f386				  -	      endif
   1590  f386					      endif
   1591  f386
   1592  f386
   1593  f386
   1594  f386
   1595  f386							;set score pointers
   1596  f386		       a7 95		      lax	score+2
   1597  f388		       20 b9 f3 	      jsr	scorepointerset
   1598  f38b		       84 9b		      sty	scorepointers+5
   1599  f38d		       86 98		      stx	scorepointers+2
   1600  f38f		       a7 94		      lax	score+1
   1601  f391		       20 b9 f3 	      jsr	scorepointerset
   1602  f394		       84 9a		      sty	scorepointers+4
   1603  f396		       86 97		      stx	scorepointers+1
   1604  f398		       a7 93		      lax	score
   1605  f39a		       20 b9 f3 	      jsr	scorepointerset
   1606  f39d		       84 99		      sty	scorepointers+3
   1607  f39f		       86 96		      stx	scorepointers
   1608  f3a1
   1609  f3a1				   vblk
   1610  f3a1							; run possible vblank bB code
   1611  f3a1				  -	      ifconst	vblank_bB_code
   1612  f3a1				  -	      jsr	vblank_bB_code
   1613  f3a1					      endif
   1614  f3a1				   vblk2
   1615  f3a1		       ad 84 02 	      LDA	INTIM
   1616  f3a4		       30 fb		      bmi	vblk2
   1617  f3a6		       4c 34 f0 	      jmp	kernel
   1618  f3a9
   1619  f3a9
   1620  f3a9		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f3b2		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f3b9				   repostable
   1623  f3b9
   1624  f3b9				   scorepointerset
   1625  f3b9		       29 0f		      and	#$0F
   1626  f3bb		       0a		      asl
   1627  f3bc		       0a		      asl
   1628  f3bd		       0a		      asl
   1629  f3be		       69 9c		      adc	#<scoretable
   1630  f3c0		       a8		      tay
   1631  f3c1		       8a		      txa
   1632  f3c2							; and #$F0
   1633  f3c2							; lsr
   1634  f3c2		       4b f0		      asr	#$F0
   1635  f3c4		       69 9c		      adc	#<scoretable
   1636  f3c6		       aa		      tax
   1637  f3c7		       60		      rts
   1638  f3c8				   game
   1639  f3c8				   .
   1640  f3c8							; 
   1641  f3c8
   1642  f3c8				   .
   1643  f3c8							; 
   1644  f3c8
   1645  f3c8				   .
   1646  f3c8							; 
   1647  f3c8
   1648  f3c8				   .
   1649  f3c8							; 
   1650  f3c8
   1651  f3c8				   .L00 		;  dim _Ch0_Sound  =  q
   1652  f3c8
   1653  f3c8				   .L01 		;  dim _Ch0_Duration  =  r
   1654  f3c8
   1655  f3c8				   .L02 		;  dim _Ch0_Counter  =  s
   1656  f3c8
   1657  f3c8				   .
   1658  f3c8							; 
   1659  f3c8
   1660  f3c8				   .L03 		;  dim _Bit0_Reset_Restrainer	=  y
   1661  f3c8
   1662  f3c8				   .
   1663  f3c8							; 
   1664  f3c8
   1665  f3c8				   .L04 		;  const noscore  =  1
   1666  f3c8
   1667  f3c8				   .
   1668  f3c8							; 
   1669  f3c8
   1670  f3c8				   .__Start_Restart
   1671  f3c8							; __Start_Restart
   1672  f3c8
   1673  f3c8				   .
   1674  f3c8							; 
   1675  f3c8
   1676  f3c8				   .L05 		;  AUDV0  =  0  :  AUDV1  =  0
   1677  f3c8
   1678  f3c8		       a9 00		      LDA	#0
   1679  f3ca		       85 19		      STA	AUDV0
   1680  f3cc		       85 1a		      STA	AUDV1
   1681  f3ce				   .
   1682  f3ce							; 
   1683  f3ce
   1684  f3ce				   .L06 		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1685  f3ce
   1686  f3ce		       a9 00		      LDA	#0
   1687  f3d0		       85 d4		      STA	a
   1688  f3d2		       85 d5		      STA	b
   1689  f3d4		       85 d6		      STA	c
   1690  f3d6		       85 d7		      STA	d
   1691  f3d8		       85 d8		      STA	e
   1692  f3da		       85 d9		      STA	f
   1693  f3dc		       85 da		      STA	g
   1694  f3de		       85 db		      STA	h
   1695  f3e0		       85 dc		      STA	i
   1696  f3e2				   .L07 		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1697  f3e2
   1698  f3e2		       a9 00		      LDA	#0
   1699  f3e4		       85 dd		      STA	j
   1700  f3e6		       85 de		      STA	k
   1701  f3e8		       85 df		      STA	l
   1702  f3ea		       85 e0		      STA	m
   1703  f3ec		       85 e1		      STA	n
   1704  f3ee		       85 e2		      STA	o
   1705  f3f0		       85 e3		      STA	p
   1706  f3f2		       85 e4		      STA	q
   1707  f3f4		       85 e5		      STA	r
   1708  f3f6				   .L08 		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0  :	z  =  0
   1709  f3f6
   1710  f3f6		       a9 00		      LDA	#0
   1711  f3f8		       85 e6		      STA	s
   1712  f3fa		       85 e7		      STA	t
   1713  f3fc		       85 e8		      STA	u
   1714  f3fe		       85 e9		      STA	v
   1715  f400		       85 ea		      STA	w
   1716  f402		       85 eb		      STA	x
   1717  f404		       85 ec		      STA	y
   1718  f406		       85 ed		      STA	z
   1719  f408				   .
   1720  f408							; 
   1721  f408
   1722  f408				   .L09 		;  playfield:
   1723  f408
   1724  f408				  -	      ifconst	pfres
   1725  f408				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1726  f408					      else
   1727  f408		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1728  f40a					      endif
   1729  f40a		       4c 39 f4 	      jmp	pflabel0
   1730  f40d				   PF_data0
   1731  f40d		       00 00		      .byte.b	%00000000, %00000000
   1732  f40f					      if	(pfwidth>2)
   1733  f40f		       00 00		      .byte.b	%00000000, %00000000
   1734  f411					      endif
   1735  f411		       00 f0		      .byte.b	%00000000, %11110000
   1736  f413					      if	(pfwidth>2)
   1737  f413		       f0 00		      .byte.b	%11110000, %00000000
   1738  f415					      endif
   1739  f415		       00 18		      .byte.b	%00000000, %00011000
   1740  f417					      if	(pfwidth>2)
   1741  f417		       18 00		      .byte.b	%00011000, %00000000
   1742  f419					      endif
   1743  f419		       00 18		      .byte.b	%00000000, %00011000
   1744  f41b					      if	(pfwidth>2)
   1745  f41b		       18 00		      .byte.b	%00011000, %00000000
   1746  f41d					      endif
   1747  f41d		       00 f0		      .byte.b	%00000000, %11110000
   1748  f41f					      if	(pfwidth>2)
   1749  f41f		       f0 00		      .byte.b	%11110000, %00000000
   1750  f421					      endif
   1751  f421		       00 80		      .byte.b	%00000000, %10000000
   1752  f423					      if	(pfwidth>2)
   1753  f423		       80 00		      .byte.b	%10000000, %00000000
   1754  f425					      endif
   1755  f425		       00 f0		      .byte.b	%00000000, %11110000
   1756  f427					      if	(pfwidth>2)
   1757  f427		       f0 00		      .byte.b	%11110000, %00000000
   1758  f429					      endif
   1759  f429		       00 8c		      .byte.b	%00000000, %10001100
   1760  f42b					      if	(pfwidth>2)
   1761  f42b		       8c 00		      .byte.b	%10001100, %00000000
   1762  f42d					      endif
   1763  f42d		       00 c0		      .byte.b	%00000000, %11000000
   1764  f42f					      if	(pfwidth>2)
   1765  f42f		       c0 00		      .byte.b	%11000000, %00000000
   1766  f431					      endif
   1767  f431		       00 70		      .byte.b	%00000000, %01110000
   1768  f433					      if	(pfwidth>2)
   1769  f433		       70 00		      .byte.b	%01110000, %00000000
   1770  f435					      endif
   1771  f435		       00 18		      .byte.b	%00000000, %00011000
   1772  f437					      if	(pfwidth>2)
   1773  f437		       18 00		      .byte.b	%00011000, %00000000
   1774  f439					      endif
   1775  f439				   pflabel0
   1776  f439		       bd 0d f4 	      lda	PF_data0,x
   1777  f43c		       95 a4		      sta	playfield,x
   1778  f43e		       ca		      dex
   1779  f43f		       10 f8		      bpl	pflabel0
   1780  f441				   .
   1781  f441							; 
   1782  f441
   1783  f441				   .
   1784  f441							; 
   1785  f441
   1786  f441				   .
   1787  f441							; 
   1788  f441
   1789  f441				   .L010		;  player0:
   1790  f441
   1791  f441		       a2 f0		      LDX	#<playerL010_0
   1792  f443		       86 8a		      STX	player0pointerlo
   1793  f445		       a9 f5		      LDA	#>playerL010_0
   1794  f447		       85 8b		      STA	player0pointerhi
   1795  f449		       a9 07		      LDA	#7
   1796  f44b		       85 8e		      STA	player0height
   1797  f44d				   .
   1798  f44d							; 
   1799  f44d
   1800  f44d				   .
   1801  f44d							; 
   1802  f44d
   1803  f44d				   .L011		;  player1:
   1804  f44d
   1805  f44d		       a2 f8		      LDX	#<playerL011_1
   1806  f44f		       86 8c		      STX	player1pointerlo
   1807  f451		       a9 f5		      LDA	#>playerL011_1
   1808  f453		       85 8d		      STA	player1pointerhi
   1809  f455		       a9 07		      LDA	#7
   1810  f457		       85 8f		      STA	player1height
   1811  f459				   .
   1812  f459							; 
   1813  f459
   1814  f459				   .
   1815  f459							; 
   1816  f459
   1817  f459				   .L012		;  COLUBK  =  $0E
   1818  f459
   1819  f459		       a9 0e		      LDA	#$0E
   1820  f45b		       85 09		      STA	COLUBK
   1821  f45d				   .
   1822  f45d							; 
   1823  f45d
   1824  f45d				   .
   1825  f45d							; 
   1826  f45d
   1827  f45d				   .L013		;  player0x = 77 : player0y = 28
   1828  f45d
   1829  f45d		       a9 4d		      LDA	#77
   1830  f45f		       85 80		      STA	player0x
   1831  f461		       a9 1c		      LDA	#28
   1832  f463		       85 85		      STA	player0y
   1833  f465				   .
   1834  f465							; 
   1835  f465
   1836  f465				   .
   1837  f465							; 
   1838  f465
   1839  f465				   .L014		;  _Bit0_Reset_Restrainer{0}  =  1
   1840  f465
   1841  f465		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   1842  f467		       09 01		      ORA	#1
   1843  f469		       85 ec		      STA	_Bit0_Reset_Restrainer
   1844  f46b				   .
   1845  f46b							; 
   1846  f46b
   1847  f46b				   .
   1848  f46b							; 
   1849  f46b
   1850  f46b				   .__Main_Loop
   1851  f46b							; __Main_Loop
   1852  f46b
   1853  f46b				   .
   1854  f46b							; 
   1855  f46b
   1856  f46b				   .
   1857  f46b							; 
   1858  f46b
   1859  f46b				   .L015		;  if _Ch0_Sound then goto __Skip_Fire
   1860  f46b
   1861  f46b		       a5 e4		      LDA	_Ch0_Sound
   1862  f46d		       f0 03		      BEQ	.skipL015
   1863  f46f				   .condpart0
   1864  f46f		       4c 8c f4 	      jmp	.__Skip_Fire
   1865  f472
   1866  f472				   .skipL015
   1867  f472				   .
   1868  f472							; 
   1869  f472
   1870  f472				   .
   1871  f472							; 
   1872  f472
   1873  f472				   .L016		;  if joy0fire then _Ch0_Sound  =  1  :  _Ch0_Duration  =  1  :  _Ch0_Counter	=  0  :  player0x = 0  :  player0y = 0	:  player1x = 77  :  player1y = 28
   1874  f472
   1875  f472		       24 0c		      bit	INPT4
   1876  f474		       30 16		      BMI	.skipL016
   1877  f476				   .condpart1
   1878  f476		       a9 01		      LDA	#1
   1879  f478		       85 e4		      STA	_Ch0_Sound
   1880  f47a		       85 e5		      STA	_Ch0_Duration
   1881  f47c		       a9 00		      LDA	#0
   1882  f47e		       85 e6		      STA	_Ch0_Counter
   1883  f480		       85 80		      STA	player0x
   1884  f482		       85 85		      STA	player0y
   1885  f484		       a9 4d		      LDA	#77
   1886  f486		       85 81		      STA	player1x
   1887  f488		       a9 1c		      LDA	#28
   1888  f48a		       85 86		      STA	player1y
   1889  f48c				   .skipL016
   1890  f48c				   .
   1891  f48c							; 
   1892  f48c
   1893  f48c				   .__Skip_Fire
   1894  f48c							; __Skip_Fire
   1895  f48c
   1896  f48c				   .
   1897  f48c							; 
   1898  f48c
   1899  f48c				   .
   1900  f48c							; 
   1901  f48c
   1902  f48c				   .L017		;  if !_Ch0_Sound then goto __Skip_Ch_0
   1903  f48c
   1904  f48c		       a5 e4		      LDA	_Ch0_Sound
   1905  f48e		       d0 03		      BNE	.skipL017
   1906  f490				   .condpart2
   1907  f490		       4c fe f4 	      jmp	.__Skip_Ch_0
   1908  f493
   1909  f493				   .skipL017
   1910  f493				   .
   1911  f493							; 
   1912  f493
   1913  f493				   .L018		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   1914  f493
   1915  f493		       c6 e5		      DEC	_Ch0_Duration
   1916  f495				   .
   1917  f495							; 
   1918  f495
   1919  f495				   .L019		;  if _Ch0_Duration then goto __Skip_Ch_0
   1920  f495
   1921  f495		       a5 e5		      LDA	_Ch0_Duration
   1922  f497		       f0 03		      BEQ	.skipL019
   1923  f499				   .condpart3
   1924  f499		       4c fe f4 	      jmp	.__Skip_Ch_0
   1925  f49c
   1926  f49c				   .skipL019
   1927  f49c				   .
   1928  f49c							; 
   1929  f49c
   1930  f49c				   .L020		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   1931  f49c
   1932  f49c		       a5 e4		      LDA	_Ch0_Sound
   1933  f49e		       c9 01		      CMP	#1
   1934  f4a0		       f0 03		      BEQ	.skipL020
   1935  f4a2				   .condpart4
   1936  f4a2		       4c f5 f4 	      jmp	.__Skip_Ch0_Sound_001
   1937  f4a5
   1938  f4a5				   .skipL020
   1939  f4a5				   .
   1940  f4a5							; 
   1941  f4a5
   1942  f4a5				   .L021		;  temp4  =  _SD_FireB[_Ch0_Counter]
   1943  f4a5
   1944  f4a5		       a6 e6		      LDX	_Ch0_Counter
   1945  f4a7		       bd 1f f5 	      LDA	_SD_FireB,x
   1946  f4aa		       85 9f		      STA	temp4
   1947  f4ac				   .
   1948  f4ac							; 
   1949  f4ac
   1950  f4ac				   .L022		;  if temp4  =  255 then player1x = 0	:  player1y = 0  :  player0x = 77  :  player0y = 28
   1951  f4ac
   1952  f4ac		       a5 9f		      LDA	temp4
   1953  f4ae		       c9 ff		      CMP	#255
   1954  f4b0		       d0 0e		      BNE	.skipL022
   1955  f4b2				   .condpart5
   1956  f4b2		       a9 00		      LDA	#0
   1957  f4b4		       85 81		      STA	player1x
   1958  f4b6		       85 86		      STA	player1y
   1959  f4b8		       a9 4d		      LDA	#77
   1960  f4ba		       85 80		      STA	player0x
   1961  f4bc		       a9 1c		      LDA	#28
   1962  f4be		       85 85		      STA	player0y
   1963  f4c0				   .skipL022
   1964  f4c0				   .L023		;  if temp4  =  255 then goto __Clear_Ch_0
   1965  f4c0
   1966  f4c0		       a5 9f		      LDA	temp4
   1967  f4c2		       c9 ff		      CMP	#255
   1968  f4c4		       d0 03		      BNE	.skipL023
   1969  f4c6				   .condpart6
   1970  f4c6		       4c f8 f4 	      jmp	.__Clear_Ch_0
   1971  f4c9
   1972  f4c9				   .skipL023
   1973  f4c9				   .
   1974  f4c9							; 
   1975  f4c9
   1976  f4c9				   .L024		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   1977  f4c9
   1978  f4c9		       e6 e6		      INC	_Ch0_Counter
   1979  f4cb				   .L025		;  temp5  =  _SD_FireB[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   1980  f4cb
   1981  f4cb		       a6 e6		      LDX	_Ch0_Counter
   1982  f4cd		       bd 1f f5 	      LDA	_SD_FireB,x
   1983  f4d0		       85 a0		      STA	temp5
   1984  f4d2		       e6 e6		      INC	_Ch0_Counter
   1985  f4d4				   .L026		;  temp6  =  _SD_FireB[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   1986  f4d4
   1987  f4d4		       a6 e6		      LDX	_Ch0_Counter
   1988  f4d6		       bd 1f f5 	      LDA	_SD_FireB,x
   1989  f4d9		       85 a1		      STA	temp6
   1990  f4db		       e6 e6		      INC	_Ch0_Counter
   1991  f4dd				   .
   1992  f4dd							; 
   1993  f4dd
   1994  f4dd				   .
   1995  f4dd							; 
   1996  f4dd
   1997  f4dd				   .L027		;  AUDV0  =  temp4
   1998  f4dd
   1999  f4dd		       a5 9f		      LDA	temp4
   2000  f4df		       85 19		      STA	AUDV0
   2001  f4e1				   .L028		;  AUDC0  =  temp5
   2002  f4e1
   2003  f4e1		       a5 a0		      LDA	temp5
   2004  f4e3		       85 15		      STA	AUDC0
   2005  f4e5				   .L029		;  AUDF0  =  temp6
   2006  f4e5
   2007  f4e5		       a5 a1		      LDA	temp6
   2008  f4e7		       85 17		      STA	AUDF0
   2009  f4e9				   .
   2010  f4e9							; 
   2011  f4e9
   2012  f4e9				   .
   2013  f4e9							; 
   2014  f4e9
   2015  f4e9				   .L030		;  _Ch0_Duration  =  _SD_FireB[_Ch0_Counter]  :  _Ch0_Counter	=  _Ch0_Counter  +  1
   2016  f4e9
   2017  f4e9		       a6 e6		      LDX	_Ch0_Counter
   2018  f4eb		       bd 1f f5 	      LDA	_SD_FireB,x
   2019  f4ee		       85 e5		      STA	_Ch0_Duration
   2020  f4f0		       e6 e6		      INC	_Ch0_Counter
   2021  f4f2				   .
   2022  f4f2							; 
   2023  f4f2
   2024  f4f2				   .
   2025  f4f2							; 
   2026  f4f2
   2027  f4f2				   .L031		;  goto __Skip_Ch_0
   2028  f4f2
   2029  f4f2		       4c fe f4 	      jmp	.__Skip_Ch_0
   2030  f4f5
   2031  f4f5				   .
   2032  f4f5							; 
   2033  f4f5
   2034  f4f5				   .__Skip_Ch0_Sound_001
   2035  f4f5							; __Skip_Ch0_Sound_001
   2036  f4f5
   2037  f4f5				   .
   2038  f4f5							; 
   2039  f4f5
   2040  f4f5				   .
   2041  f4f5							; 
   2042  f4f5
   2043  f4f5				   .L032		;  goto __Skip_Ch_0
   2044  f4f5
   2045  f4f5		       4c fe f4 	      jmp	.__Skip_Ch_0
   2046  f4f8
   2047  f4f8				   .
   2048  f4f8							; 
   2049  f4f8
   2050  f4f8				   .__Clear_Ch_0
   2051  f4f8							; __Clear_Ch_0
   2052  f4f8
   2053  f4f8				   .
   2054  f4f8							; 
   2055  f4f8
   2056  f4f8				   .L033		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   2057  f4f8
   2058  f4f8		       a9 00		      LDA	#0
   2059  f4fa		       85 e4		      STA	_Ch0_Sound
   2060  f4fc		       85 19		      STA	AUDV0
   2061  f4fe				   .
   2062  f4fe							; 
   2063  f4fe
   2064  f4fe				   .
   2065  f4fe							; 
   2066  f4fe
   2067  f4fe				   .
   2068  f4fe							; 
   2069  f4fe
   2070  f4fe				   .__Skip_Ch_0
   2071  f4fe							; __Skip_Ch_0
   2072  f4fe
   2073  f4fe				   .
   2074  f4fe							; 
   2075  f4fe
   2076  f4fe				   .
   2077  f4fe							; 
   2078  f4fe
   2079  f4fe				   .L034		;  drawscreen
   2080  f4fe
   2081  f4fe		       20 28 f3 	      jsr	drawscreen
   2082  f501				   .
   2083  f501							; 
   2084  f501
   2085  f501				   .
   2086  f501							; 
   2087  f501
   2088  f501				   .L035		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   2089  f501
   2090  f501		       a9 01		      lda	#1
   2091  f503		       2c 82 02 	      bit	SWCHB
   2092  f506		       f0 09		      BEQ	.skipL035
   2093  f508				   .condpart7
   2094  f508		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2095  f50a		       29 fe		      AND	#254
   2096  f50c		       85 ec		      STA	_Bit0_Reset_Restrainer
   2097  f50e		       4c 6b f4 	      jmp	.__Main_Loop
   2098  f511
   2099  f511				   .skipL035
   2100  f511				   .
   2101  f511							; 
   2102  f511
   2103  f511				   .
   2104  f511							; 
   2105  f511
   2106  f511				   .L036		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   2107  f511
   2108  f511		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2109  f513		       4a		      LSR
   2110  f514		       90 03		      BCC	.skipL036
   2111  f516				   .condpart8
   2112  f516		       4c 6b f4 	      jmp	.__Main_Loop
   2113  f519
   2114  f519				   .skipL036
   2115  f519				   .
   2116  f519							; 
   2117  f519
   2118  f519				   .L037		;  goto __Start_Restart
   2119  f519
   2120  f519		       4c c8 f3 	      jmp	.__Start_Restart
   2121  f51c
   2122  f51c				   .
   2123  f51c							; 
   2124  f51c
   2125  f51c				   .L038		;  data _SD_FireB
   2126  f51c
   2127  f51c		       4c f0 f5 	      JMP	.skipL038
   2128  f51f				   _SD_FireB
   2129  f51f		       08 0c 0b 	      .byte.b	8,12,11
   2130  f522
   2131  f522		       03		      .byte.b	3
   2132  f523
   2133  f523		       00 00 00 	      .byte.b	0,0,0
   2134  f526
   2135  f526		       01		      .byte.b	1
   2136  f527
   2137  f527		       02 0c 0b 	      .byte.b	2,12,11
   2138  f52a
   2139  f52a		       01		      .byte.b	1
   2140  f52b
   2141  f52b		       00 00 00 	      .byte.b	0,0,0
   2142  f52e
   2143  f52e		       02		      .byte.b	2
   2144  f52f
   2145  f52f		       08 04 1f 	      .byte.b	8,4,31
   2146  f532
   2147  f532		       03		      .byte.b	3
   2148  f533
   2149  f533		       00 00 00 	      .byte.b	0,0,0
   2150  f536
   2151  f536		       01		      .byte.b	1
   2152  f537
   2153  f537		       02 04 1f 	      .byte.b	2,4,31
   2154  f53a
   2155  f53a		       01		      .byte.b	1
   2156  f53b
   2157  f53b		       00 00 00 	      .byte.b	0,0,0
   2158  f53e
   2159  f53e		       02		      .byte.b	2
   2160  f53f
   2161  f53f		       08 04 1d 	      .byte.b	8,4,29
   2162  f542
   2163  f542		       03		      .byte.b	3
   2164  f543
   2165  f543		       00 00 00 	      .byte.b	0,0,0
   2166  f546
   2167  f546		       01		      .byte.b	1
   2168  f547
   2169  f547		       02 04 1d 	      .byte.b	2,4,29
   2170  f54a
   2171  f54a		       01		      .byte.b	1
   2172  f54b
   2173  f54b		       00 00 00 	      .byte.b	0,0,0
   2174  f54e
   2175  f54e		       02		      .byte.b	2
   2176  f54f
   2177  f54f		       08 04 17 	      .byte.b	8,4,23
   2178  f552
   2179  f552		       0f		      .byte.b	15
   2180  f553
   2181  f553		       00 00 00 	      .byte.b	0,0,0
   2182  f556
   2183  f556		       01		      .byte.b	1
   2184  f557
   2185  f557		       02 04 17 	      .byte.b	2,4,23
   2186  f55a
   2187  f55a		       01		      .byte.b	1
   2188  f55b
   2189  f55b		       00 00 00 	      .byte.b	0,0,0
   2190  f55e
   2191  f55e		       08		      .byte.b	8
   2192  f55f
   2193  f55f		       08 04 17 	      .byte.b	8,4,23
   2194  f562
   2195  f562		       26		      .byte.b	38
   2196  f563
   2197  f563		       00 00 00 	      .byte.b	0,0,0
   2198  f566
   2199  f566		       01		      .byte.b	1
   2200  f567
   2201  f567		       02 04 17 	      .byte.b	2,4,23
   2202  f56a
   2203  f56a		       01		      .byte.b	1
   2204  f56b
   2205  f56b		       00 00 00 	      .byte.b	0,0,0
   2206  f56e
   2207  f56e		       08		      .byte.b	8
   2208  f56f
   2209  f56f		       08 0c 0b 	      .byte.b	8,12,11
   2210  f572
   2211  f572		       0f		      .byte.b	15
   2212  f573
   2213  f573		       00 00 00 	      .byte.b	0,0,0
   2214  f576
   2215  f576		       01		      .byte.b	1
   2216  f577
   2217  f577		       02 0c 0b 	      .byte.b	2,12,11
   2218  f57a
   2219  f57a		       01		      .byte.b	1
   2220  f57b
   2221  f57b		       00 00 00 	      .byte.b	0,0,0
   2222  f57e
   2223  f57e		       08		      .byte.b	8
   2224  f57f
   2225  f57f		       08 0c 0b 	      .byte.b	8,12,11
   2226  f582
   2227  f582		       32		      .byte.b	50
   2228  f583
   2229  f583		       00 00 00 	      .byte.b	0,0,0
   2230  f586
   2231  f586		       01		      .byte.b	1
   2232  f587
   2233  f587		       02 0c 0b 	      .byte.b	2,12,11
   2234  f58a
   2235  f58a		       01		      .byte.b	1
   2236  f58b
   2237  f58b		       00 00 00 	      .byte.b	0,0,0
   2238  f58e
   2239  f58e		       08		      .byte.b	8
   2240  f58f
   2241  f58f		       08 0c 0b 	      .byte.b	8,12,11
   2242  f592
   2243  f592		       14		      .byte.b	20
   2244  f593
   2245  f593		       00 00 00 	      .byte.b	0,0,0
   2246  f596
   2247  f596		       01		      .byte.b	1
   2248  f597
   2249  f597		       02 0c 0b 	      .byte.b	2,12,11
   2250  f59a
   2251  f59a		       01		      .byte.b	1
   2252  f59b
   2253  f59b		       00 00 00 	      .byte.b	0,0,0
   2254  f59e
   2255  f59e		       08		      .byte.b	8
   2256  f59f
   2257  f59f		       08 04 17 	      .byte.b	8,4,23
   2258  f5a2
   2259  f5a2		       14		      .byte.b	20
   2260  f5a3
   2261  f5a3		       00 00 00 	      .byte.b	0,0,0
   2262  f5a6
   2263  f5a6		       01		      .byte.b	1
   2264  f5a7
   2265  f5a7		       02 04 17 	      .byte.b	2,4,23
   2266  f5aa
   2267  f5aa		       01		      .byte.b	1
   2268  f5ab
   2269  f5ab		       00 00 00 	      .byte.b	0,0,0
   2270  f5ae
   2271  f5ae		       08		      .byte.b	8
   2272  f5af
   2273  f5af		       08 04 1a 	      .byte.b	8,4,26
   2274  f5b2
   2275  f5b2		       14		      .byte.b	20
   2276  f5b3
   2277  f5b3		       00 00 00 	      .byte.b	0,0,0
   2278  f5b6
   2279  f5b6		       01		      .byte.b	1
   2280  f5b7
   2281  f5b7		       02 04 1a 	      .byte.b	2,4,26
   2282  f5ba
   2283  f5ba		       01		      .byte.b	1
   2284  f5bb
   2285  f5bb		       00 00 00 	      .byte.b	0,0,0
   2286  f5be
   2287  f5be		       08		      .byte.b	8
   2288  f5bf
   2289  f5bf		       08 04 17 	      .byte.b	8,4,23
   2290  f5c2
   2291  f5c2		       14		      .byte.b	20
   2292  f5c3
   2293  f5c3		       00 00 00 	      .byte.b	0,0,0
   2294  f5c6
   2295  f5c6		       01		      .byte.b	1
   2296  f5c7
   2297  f5c7		       02 04 17 	      .byte.b	2,4,23
   2298  f5ca
   2299  f5ca		       01		      .byte.b	1
   2300  f5cb
   2301  f5cb		       00 00 00 	      .byte.b	0,0,0
   2302  f5ce
   2303  f5ce		       08		      .byte.b	8
   2304  f5cf
   2305  f5cf		       08 04 13 	      .byte.b	8,4,19
   2306  f5d2
   2307  f5d2		       14		      .byte.b	20
   2308  f5d3
   2309  f5d3		       00 00 00 	      .byte.b	0,0,0
   2310  f5d6
   2311  f5d6		       01		      .byte.b	1
   2312  f5d7
   2313  f5d7		       02 04 13 	      .byte.b	2,4,19
   2314  f5da
   2315  f5da		       01		      .byte.b	1
   2316  f5db
   2317  f5db		       00 00 00 	      .byte.b	0,0,0
   2318  f5de
   2319  f5de		       08		      .byte.b	8
   2320  f5df
   2321  f5df		       08 04 17 	      .byte.b	8,4,23
   2322  f5e2
   2323  f5e2		       42		      .byte.b	66
   2324  f5e3
   2325  f5e3		       00 00 00 	      .byte.b	0,0,0
   2326  f5e6
   2327  f5e6		       01		      .byte.b	1
   2328  f5e7
   2329  f5e7		       02 04 17 	      .byte.b	2,4,23
   2330  f5ea
   2331  f5ea		       01		      .byte.b	1
   2332  f5eb
   2333  f5eb		       00 00 00 	      .byte.b	0,0,0
   2334  f5ee
   2335  f5ee		       08		      .byte.b	8
   2336  f5ef
   2337  f5ef		       ff		      .byte.b	255
   2338  f5f0
   2339  f5f0				   .skipL038
   2340  f5f0				  -	      if	(<*) > (<(*+7))
   2341  f5f0				  -	      repeat	($100-<*)
   2342  f5f0				  -	      .byte	0
   2343  f5f0				  -	      repend
   2344  f5f0					      endif
   2345  f5f0				   playerL010_0
   2346  f5f0		       00		      .byte.b	%00000000
   2347  f5f1		       7e		      .byte.b	%01111110
   2348  f5f2		       00		      .byte.b	%00000000
   2349  f5f3		       00		      .byte.b	%00000000
   2350  f5f4		       24		      .byte.b	%00100100
   2351  f5f5		       24		      .byte.b	%00100100
   2352  f5f6		       24		      .byte.b	%00100100
   2353  f5f7		       00		      .byte.b	%00000000
   2354  f5f8				  -	      if	(<*) > (<(*+7))
   2355  f5f8				  -	      repeat	($100-<*)
   2356  f5f8				  -	      .byte	0
   2357  f5f8				  -	      repend
   2358  f5f8					      endif
   2359  f5f8				   playerL011_1
   2360  f5f8		       00		      .byte.b	%00000000
   2361  f5f9		       3c		      .byte.b	%00111100
   2362  f5fa		       42		      .byte.b	%01000010
   2363  f5fb		       00		      .byte.b	%00000000
   2364  f5fc		       24		      .byte.b	%00100100
   2365  f5fd		       24		      .byte.b	%00100100
   2366  f5fe		       24		      .byte.b	%00100100
   2367  f5ff		       00		      .byte.b	%00000000
   2368  f600					      if	ECHOFIRST
      2460 bytes of ROM space left
   2369  f600					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2370  f600					      endif
   2371  f600		       00 01	   ECHOFIRST  =	1
   2372  f600
   2373  f600
   2374  f600
   2375  f600							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2376  f600
   2377  f600							; feel free to modify the score graphics - just keep each digit 8 high
   2378  f600							; and keep the conditional compilation stuff intact
   2379  f600				  -	      ifconst	ROM2k
   2380  f600				  -	      ORG	$F7AC-8
   2381  f600					      else
   2382  f600				  -	      ifconst	bankswitch
   2383  f600				  -	      if	bankswitch == 8
   2384  f600				  -	      ORG	$2F94-bscode_length
   2385  f600				  -	      RORG	$FF94-bscode_length
   2386  f600				  -	      endif
   2387  f600				  -	      if	bankswitch == 16
   2388  f600				  -	      ORG	$4F94-bscode_length
   2389  f600				  -	      RORG	$FF94-bscode_length
   2390  f600				  -	      endif
   2391  f600				  -	      if	bankswitch == 32
   2392  f600				  -	      ORG	$8F94-bscode_length
   2393  f600				  -	      RORG	$FF94-bscode_length
   2394  f600				  -	      endif
   2395  f600				  -	      if	bankswitch == 64
   2396  f600				  -	      ORG	$10F80-bscode_length
   2397  f600				  -	      RORG	$1FF80-bscode_length
   2398  f600				  -	      endif
   2399  f600					      else
   2400  ff9c					      ORG	$FF9C
   2401  ff9c					      endif
   2402  ff9c					      endif
   2403  ff9c
   2404  ff9c							; font equates
   2405  ff9c		       00 01	   .21stcentury =	1
   2406  ff9c		       00 02	   alarmclock =	2
   2407  ff9c		       00 03	   handwritten =	3
   2408  ff9c		       00 04	   interrupted =	4
   2409  ff9c		       00 05	   retroputer =	5
   2410  ff9c		       00 06	   whimsey    =	6
   2411  ff9c		       00 07	   tiny       =	7
   2412  ff9c		       00 08	   hex	      =	8
   2413  ff9c
   2414  ff9c				  -	      ifconst	font
   2415  ff9c				  -	      if	font == hex
   2416  ff9c				  -	      ORG	. - 48
   2417  ff9c				  -	      endif
   2418  ff9c					      endif
   2419  ff9c
   2420  ff9c				   scoretable
   2421  ff9c
   2422  ff9c				  -	      ifconst	font
   2423  ff9c				  -	      if	font == .21stcentury
   2424  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2425  ff9c				  -	      endif
   2426  ff9c				  -	      if	font == alarmclock
   2427  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2428  ff9c				  -	      endif
   2429  ff9c				  -	      if	font == handwritten
   2430  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2431  ff9c				  -	      endif
   2432  ff9c				  -	      if	font == interrupted
   2433  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2434  ff9c				  -	      endif
   2435  ff9c				  -	      if	font == retroputer
   2436  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2437  ff9c				  -	      endif
   2438  ff9c				  -	      if	font == whimsey
   2439  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2440  ff9c				  -	      endif
   2441  ff9c				  -	      if	font == tiny
   2442  ff9c				  -	      include	"score_graphics.asm.tiny"
   2443  ff9c				  -	      endif
   2444  ff9c				  -	      if	font == hex
   2445  ff9c				  -	      include	"score_graphics.asm.hex"
   2446  ff9c				  -	      endif
   2447  ff9c					      else		; default font
   2448  ff9c
   2449  ff9c		       3c		      .byte.b	%00111100
   2450  ff9d		       66		      .byte.b	%01100110
   2451  ff9e		       66		      .byte.b	%01100110
   2452  ff9f		       66		      .byte.b	%01100110
   2453  ffa0		       66		      .byte.b	%01100110
   2454  ffa1		       66		      .byte.b	%01100110
   2455  ffa2		       66		      .byte.b	%01100110
   2456  ffa3		       3c		      .byte.b	%00111100
   2457  ffa4
   2458  ffa4		       7e		      .byte.b	%01111110
   2459  ffa5		       18		      .byte.b	%00011000
   2460  ffa6		       18		      .byte.b	%00011000
   2461  ffa7		       18		      .byte.b	%00011000
   2462  ffa8		       18		      .byte.b	%00011000
   2463  ffa9		       38		      .byte.b	%00111000
   2464  ffaa		       18		      .byte.b	%00011000
   2465  ffab		       08		      .byte.b	%00001000
   2466  ffac
   2467  ffac		       7e		      .byte.b	%01111110
   2468  ffad		       60		      .byte.b	%01100000
   2469  ffae		       60		      .byte.b	%01100000
   2470  ffaf		       3c		      .byte.b	%00111100
   2471  ffb0		       06		      .byte.b	%00000110
   2472  ffb1		       06		      .byte.b	%00000110
   2473  ffb2		       46		      .byte.b	%01000110
   2474  ffb3		       3c		      .byte.b	%00111100
   2475  ffb4
   2476  ffb4		       3c		      .byte.b	%00111100
   2477  ffb5		       46		      .byte.b	%01000110
   2478  ffb6		       06		      .byte.b	%00000110
   2479  ffb7		       06		      .byte.b	%00000110
   2480  ffb8		       1c		      .byte.b	%00011100
   2481  ffb9		       06		      .byte.b	%00000110
   2482  ffba		       46		      .byte.b	%01000110
   2483  ffbb		       3c		      .byte.b	%00111100
   2484  ffbc
   2485  ffbc		       0c		      .byte.b	%00001100
   2486  ffbd		       0c		      .byte.b	%00001100
   2487  ffbe		       7e		      .byte.b	%01111110
   2488  ffbf		       4c		      .byte.b	%01001100
   2489  ffc0		       4c		      .byte.b	%01001100
   2490  ffc1		       2c		      .byte.b	%00101100
   2491  ffc2		       1c		      .byte.b	%00011100
   2492  ffc3		       0c		      .byte.b	%00001100
   2493  ffc4
   2494  ffc4		       3c		      .byte.b	%00111100
   2495  ffc5		       46		      .byte.b	%01000110
   2496  ffc6		       06		      .byte.b	%00000110
   2497  ffc7		       06		      .byte.b	%00000110
   2498  ffc8		       3c		      .byte.b	%00111100
   2499  ffc9		       60		      .byte.b	%01100000
   2500  ffca		       60		      .byte.b	%01100000
   2501  ffcb		       7e		      .byte.b	%01111110
   2502  ffcc
   2503  ffcc		       3c		      .byte.b	%00111100
   2504  ffcd		       66		      .byte.b	%01100110
   2505  ffce		       66		      .byte.b	%01100110
   2506  ffcf		       66		      .byte.b	%01100110
   2507  ffd0		       7c		      .byte.b	%01111100
   2508  ffd1		       60		      .byte.b	%01100000
   2509  ffd2		       62		      .byte.b	%01100010
   2510  ffd3		       3c		      .byte.b	%00111100
   2511  ffd4
   2512  ffd4		       30		      .byte.b	%00110000
   2513  ffd5		       30		      .byte.b	%00110000
   2514  ffd6		       30		      .byte.b	%00110000
   2515  ffd7		       18		      .byte.b	%00011000
   2516  ffd8		       0c		      .byte.b	%00001100
   2517  ffd9		       06		      .byte.b	%00000110
   2518  ffda		       42		      .byte.b	%01000010
   2519  ffdb		       3e		      .byte.b	%00111110
   2520  ffdc
   2521  ffdc		       3c		      .byte.b	%00111100
   2522  ffdd		       66		      .byte.b	%01100110
   2523  ffde		       66		      .byte.b	%01100110
   2524  ffdf		       66		      .byte.b	%01100110
   2525  ffe0		       3c		      .byte.b	%00111100
   2526  ffe1		       66		      .byte.b	%01100110
   2527  ffe2		       66		      .byte.b	%01100110
   2528  ffe3		       3c		      .byte.b	%00111100
   2529  ffe4
   2530  ffe4		       3c		      .byte.b	%00111100
   2531  ffe5		       46		      .byte.b	%01000110
   2532  ffe6		       06		      .byte.b	%00000110
   2533  ffe7		       3e		      .byte.b	%00111110
   2534  ffe8		       66		      .byte.b	%01100110
   2535  ffe9		       66		      .byte.b	%01100110
   2536  ffea		       66		      .byte.b	%01100110
   2537  ffeb		       3c		      .byte.b	%00111100
   2538  ffec
   2539  ffec					      ifnconst	DPC_kernel_options
   2540  ffec
   2541  ffec		       00		      .byte.b	%00000000
   2542  ffed		       00		      .byte.b	%00000000
   2543  ffee		       00		      .byte.b	%00000000
   2544  ffef		       00		      .byte.b	%00000000
   2545  fff0		       00		      .byte.b	%00000000
   2546  fff1		       00		      .byte.b	%00000000
   2547  fff2		       00		      .byte.b	%00000000
   2548  fff3		       00		      .byte.b	%00000000
   2549  fff4
   2550  fff4					      endif
   2551  fff4
   2552  fff4					      endif
   2553  fff4
   2554  fff4				  -	      ifconst	ROM2k
   2555  fff4				  -	      ORG	$F7FC
   2556  fff4					      else
   2557  fff4				  -	      ifconst	bankswitch
   2558  fff4				  -	      if	bankswitch == 8
   2559  fff4				  -	      ORG	$2FF4-bscode_length
   2560  fff4				  -	      RORG	$FFF4-bscode_length
   2561  fff4				  -	      endif
   2562  fff4				  -	      if	bankswitch == 16
   2563  fff4				  -	      ORG	$4FF4-bscode_length
   2564  fff4				  -	      RORG	$FFF4-bscode_length
   2565  fff4				  -	      endif
   2566  fff4				  -	      if	bankswitch == 32
   2567  fff4				  -	      ORG	$8FF4-bscode_length
   2568  fff4				  -	      RORG	$FFF4-bscode_length
   2569  fff4				  -	      endif
   2570  fff4				  -	      if	bankswitch == 64
   2571  fff4				  -	      ORG	$10FE0-bscode_length
   2572  fff4				  -	      RORG	$1FFE0-bscode_length
   2573  fff4				  -	      endif
   2574  fff4					      else
   2575  fffc					      ORG	$FFFC
   2576  fffc					      endif
   2577  fffc					      endif
   2578  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2579  fffc
   2580  fffc				  -	      ifconst	bankswitch
   2581  fffc				  -	      if	bankswitch == 8
   2582  fffc				  -	      ORG	$2FFC
   2583  fffc				  -	      RORG	$FFFC
   2584  fffc				  -	      endif
   2585  fffc				  -	      if	bankswitch == 16
   2586  fffc				  -	      ORG	$4FFC
   2587  fffc				  -	      RORG	$FFFC
   2588  fffc				  -	      endif
   2589  fffc				  -	      if	bankswitch == 32
   2590  fffc				  -	      ORG	$8FFC
   2591  fffc				  -	      RORG	$FFFC
   2592  fffc				  -	      endif
   2593  fffc				  -	      if	bankswitch == 64
   2594  fffc				  -	      ORG	$10FF0
   2595  fffc				  -	      RORG	$1FFF0
   2596  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2597  fffc				  -	      ORG	$10FF8
   2598  fffc				  -	      RORG	$1FFF8
   2599  fffc				  -	      ifconst	superchip
   2600  fffc				  -	      .byte	"E","F","S","C"
   2601  fffc				  -	      else
   2602  fffc				  -	      .byte	"E","F","E","F"
   2603  fffc				  -	      endif
   2604  fffc				  -	      ORG	$10FFC
   2605  fffc				  -	      RORG	$1FFFC
   2606  fffc				  -	      endif
   2607  fffc					      else
   2608  fffc				  -	      ifconst	ROM2k
   2609  fffc				  -	      ORG	$F7FC
   2610  fffc					      else
   2611  fffc					      ORG	$FFFC
   2612  fffc					      endif
   2613  fffc					      endif
   2614  fffc		       00 f0		      .word.w	(start & $ffff)
   2615  fffe		       00 f0		      .word.w	(start & $ffff)
